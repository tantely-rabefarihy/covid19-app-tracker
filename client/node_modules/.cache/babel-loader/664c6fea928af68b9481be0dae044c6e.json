{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tantelyrabefarihy/Documents/concordia-bootcamps/final-project-covid-tracker/covid-app/src/helpers/helpers.js\";\nimport { Circle, Popup, Tooltip } from \"react-leaflet\";\nimport { numeral } from \"numeral\";\nexport const displayCountryNum = (data, casesType = \"cases\") => {\n  const formatedNum = num => {\n    new Intl.NumberFormat(\"en\").format(num);\n  };\n\n  return data.map((country, index) => {\n    const dateUpdate = new Date(country.updated).toLocaleString();\n    const html = `\n    <span class=\"icon-marker\">\n      <span class=\"icon-marker-tooltip\">\n        <h2>${country.country}</h2>\n        <ul>\n          <li><strong>Confirmed:</strong> ${formatedNum(country.cases)}</li>\n          <li><strong>Deaths:</strong> ${formatedNum(country.deaths)}</li>\n          <li><strong>Recovered:</strong> ${formatedNum(country.recovered)}</li>\n          <li><strong>Last Update:</strong> ${dateUpdate}</li>\n        </ul>\n      </span>\n      New cases : ${formatedNum(country.todayCases)}\n    </span>\n  `;\n    return /*#__PURE__*/_jsxDEV(Circle, {\n      center: [country.countryInfo.lat, country.countryInfo.long],\n      radius: Math.floor(country.cases * 10 / 100),\n      color: \"red\",\n      fillColor: \"red\",\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        children: html\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  });\n};","map":{"version":3,"sources":["/Users/tantelyrabefarihy/Documents/concordia-bootcamps/final-project-covid-tracker/covid-app/src/helpers/helpers.js"],"names":["Circle","Popup","Tooltip","numeral","displayCountryNum","data","casesType","formatedNum","num","Intl","NumberFormat","format","map","country","index","dateUpdate","Date","updated","toLocaleString","html","cases","deaths","recovered","todayCases","countryInfo","lat","long","Math","floor"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,QAAuC,eAAvC;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,SAAS,GAAG,OAAnB,KAA+B;AAC9D,QAAMC,WAAW,GAAIC,GAAD,IAAS;AAC3B,QAAIC,IAAI,CAACC,YAAT,CAAsB,IAAtB,EAA4BC,MAA5B,CAAmCH,GAAnC;AACD,GAFD;;AAIA,SAAOH,IAAI,CAACO,GAAL,CAAS,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAClC,UAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASH,OAAO,CAACI,OAAjB,EAA0BC,cAA1B,EAAnB;AAEA,UAAMC,IAAI,GAAI;AAClB;AACA;AACA,cAAcN,OAAO,CAACA,OAAQ;AAC9B;AACA,4CAA4CN,WAAW,CAACM,OAAO,CAACO,KAAT,CAAgB;AACvE,yCAAyCb,WAAW,CAACM,OAAO,CAACQ,MAAT,CAAiB;AACrE,4CAA4Cd,WAAW,CAACM,OAAO,CAACS,SAAT,CAAoB;AAC3E,8CAA8CP,UAAW;AACzD;AACA;AACA,oBAAoBR,WAAW,CAACM,OAAO,CAACU,UAAT,CAAqB;AACpD;AACA,GAbI;AAeA,wBACE,QAAC,MAAD;AAEE,MAAA,MAAM,EAAE,CAACV,OAAO,CAACW,WAAR,CAAoBC,GAArB,EAA0BZ,OAAO,CAACW,WAAR,CAAoBE,IAA9C,CAFV;AAGE,MAAA,MAAM,EAAEC,IAAI,CAACC,KAAL,CAAYf,OAAO,CAACO,KAAR,GAAgB,EAAjB,GAAuB,GAAlC,CAHV;AAIE,MAAA,KAAK,EAAE,KAJT;AAKE,MAAA,SAAS,EAAE,KALb;AAAA,6BAOE,QAAC,OAAD;AAAA,kBAAUD;AAAV;AAAA;AAAA;AAAA;AAAA;AAPF,OACOL,KADP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GA7BM,CAAP;AA8BD,CAnCM","sourcesContent":["import { Circle, Popup, Tooltip } from \"react-leaflet\";\nimport { numeral } from \"numeral\";\n\nexport const displayCountryNum = (data, casesType = \"cases\") => {\n  const formatedNum = (num) => {\n    new Intl.NumberFormat(\"en\").format(num);\n  };\n\n  return data.map((country, index) => {\n    const dateUpdate = new Date(country.updated).toLocaleString();\n\n    const html = `\n    <span class=\"icon-marker\">\n      <span class=\"icon-marker-tooltip\">\n        <h2>${country.country}</h2>\n        <ul>\n          <li><strong>Confirmed:</strong> ${formatedNum(country.cases)}</li>\n          <li><strong>Deaths:</strong> ${formatedNum(country.deaths)}</li>\n          <li><strong>Recovered:</strong> ${formatedNum(country.recovered)}</li>\n          <li><strong>Last Update:</strong> ${dateUpdate}</li>\n        </ul>\n      </span>\n      New cases : ${formatedNum(country.todayCases)}\n    </span>\n  `;\n\n    return (\n      <Circle\n        key={index}\n        center={[country.countryInfo.lat, country.countryInfo.long]}\n        radius={Math.floor((country.cases * 10) / 100)}\n        color={\"red\"}\n        fillColor={\"red\"}\n      >\n        <Tooltip>{html}</Tooltip>\n      </Circle>\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}