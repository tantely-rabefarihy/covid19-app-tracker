{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tantelyrabefarihy/Documents/concordia-bootcamps/final-project-covid-tracker/covid-app/src/components/UserChart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport { WorldDataContext } from \"./WorldDataContext\";\nimport { daysCount } from \"../helpers/userPageHelper\";\nconst data = [{\n  name: \"Page A\",\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: \"Page B\",\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: \"Page C\",\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: \"Page D\",\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: \"Page E\",\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: \"Page F\",\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: \"Page G\",\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\n\nconst UserChart = () => {\n  _s();\n\n  const {\n    countryData\n  } = useContext(WorldDataContext);\n  const [numCases, setCases] = useState(null);\n  const [numDeaths, setDeaths] = useState(null);\n  const [numRecovered, setRecovered] = useState(null); // console.log({ countryData });\n\n  const cases = countryData && Object.values(countryData.cases);\n  const deaths = countryData && Object.values(countryData.deaths);\n  const recovered = countryData && Object.values(countryData.recovered);\n  const covDates = countryData && Object.keys(countryData.cases);\n  const merged = [...cases, ...deaths, ...recovered]; // const merged = (arr1, arr2) => {\n  //   return arr1.map((item, i) => {\n  //     if (item[0] === arr2[i][0]) {\n  //       return Object.assign({}, item, arr2[i]);\n  //     }\n  //   });\n  // };\n\n  const numdays = daysCount();\n  console.log({\n    cases\n  });\n  console.log({\n    merged\n  });\n  console.log(\"CASES: \", merged.slice(0, numdays));\n  console.log(\"DEATHS: \", merged.slice(numdays, numdays * 2));\n  console.log(\"RECOVERED: \", merged.slice(numdays * 2, merged.length));\n  console.log({\n    covDates\n  });\n  const covData = [];\n\n  for (let i = 0; i < (cases === null || cases === void 0 ? void 0 : cases.length); i++) {\n    let d = {\n      date: covDates[i],\n      cases: cases[i],\n      deaths: deaths[i],\n      recovered: recovered[i]\n    };\n    covData.push(d);\n  }\n\n  console.log({\n    cases,\n    deaths,\n    recovered\n  });\n  console.log(covData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AreaChart, {\n      width: 600,\n      height: 400,\n      data: covData,\n      margin: {\n        top: 10,\n        right: \"auto\",\n        left: \"auto\",\n        bottom: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        labelStyle: {\n          color: \"black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"cases\",\n        stackId: \"1\",\n        stroke: \"#dfc118\",\n        fill: \"#d8cd30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"deaths\",\n        stackId: \"1\",\n        stroke: \"#ff0000\",\n        fill: \"#f50303\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"recovered\",\n        stackId: \"1\",\n        stroke: \"#6bff58\",\n        fill: \"#49da25\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserChart, \"b8yCXo1cuDmMF2lSoUc48F08yx0=\");\n\n_c = UserChart;\nexport default UserChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserChart\");","map":{"version":3,"sources":["/Users/tantelyrabefarihy/Documents/concordia-bootcamps/final-project-covid-tracker/covid-app/src/components/UserChart.jsx"],"names":["React","useContext","useState","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","WorldDataContext","daysCount","data","name","uv","pv","amt","UserChart","countryData","numCases","setCases","numDeaths","setDeaths","numRecovered","setRecovered","cases","Object","values","deaths","recovered","covDates","keys","merged","numdays","console","log","slice","length","covData","i","d","date","push","top","right","left","bottom","color"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\n\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\nimport { WorldDataContext } from \"./WorldDataContext\";\nimport { daysCount } from \"../helpers/userPageHelper\";\nconst data = [\n  { name: \"Page A\", uv: 4000, pv: 2400, amt: 2400 },\n  { name: \"Page B\", uv: 3000, pv: 1398, amt: 2210 },\n  { name: \"Page C\", uv: 2000, pv: 9800, amt: 2290 },\n  { name: \"Page D\", uv: 2780, pv: 3908, amt: 2000 },\n  { name: \"Page E\", uv: 1890, pv: 4800, amt: 2181 },\n  { name: \"Page F\", uv: 2390, pv: 3800, amt: 2500 },\n  { name: \"Page G\", uv: 3490, pv: 4300, amt: 2100 },\n];\n\nconst UserChart = () => {\n  const { countryData } = useContext(WorldDataContext);\n  const [numCases, setCases] = useState(null);\n  const [numDeaths, setDeaths] = useState(null);\n  const [numRecovered, setRecovered] = useState(null);\n  // console.log({ countryData });\n  const cases = countryData && Object.values(countryData.cases);\n  const deaths = countryData && Object.values(countryData.deaths);\n  const recovered = countryData && Object.values(countryData.recovered);\n  const covDates = countryData && Object.keys(countryData.cases);\n  const merged = [...cases, ...deaths, ...recovered];\n  // const merged = (arr1, arr2) => {\n  //   return arr1.map((item, i) => {\n  //     if (item[0] === arr2[i][0]) {\n  //       return Object.assign({}, item, arr2[i]);\n  //     }\n  //   });\n  // };\n  const numdays = daysCount();\n  console.log({ cases });\n  console.log({ merged });\n  console.log(\"CASES: \", merged.slice(0, numdays));\n  console.log(\"DEATHS: \", merged.slice(numdays, numdays * 2));\n  console.log(\"RECOVERED: \", merged.slice(numdays * 2, merged.length));\n  console.log({ covDates });\n\n  const covData = [];\n  for (let i = 0; i < cases?.length; i++) {\n    let d = {\n      date: covDates[i],\n      cases: cases[i],\n      deaths: deaths[i],\n      recovered: recovered[i],\n    };\n    covData.push(d);\n  }\n\n  console.log({ cases, deaths, recovered });\n  console.log(covData);\n  return (\n    <div>\n      <AreaChart\n        width={600}\n        height={400}\n        data={covData}\n        margin={{ top: 10, right: \"auto\", left: \"auto\", bottom: 0 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        <Tooltip labelStyle={{ color: \"black\" }} />\n        <Area\n          type=\"monotone\"\n          dataKey=\"cases\"\n          stackId=\"1\"\n          stroke=\"#dfc118\"\n          fill=\"#d8cd30\"\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"deaths\"\n          stackId=\"1\"\n          stroke=\"#ff0000\"\n          fill=\"#f50303\"\n        />\n        <Area\n          type=\"monotone\"\n          dataKey=\"recovered\"\n          stackId=\"1\"\n          stroke=\"#6bff58\"\n          fill=\"#49da25\"\n        />\n      </AreaChart>{\" \"}\n    </div>\n  );\n};\n\nexport default UserChart;\n"]},"metadata":{},"sourceType":"module"}